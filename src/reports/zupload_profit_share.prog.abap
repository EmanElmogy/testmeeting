*&---------------------------------------------------------------------*
*& REPORT ZUPLOAD_PROFIT_SHARE
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZUPLOAD_PROFIT_SHARE.


TYPES:BEGIN OF ST,

  PERNR         TYPE PERSNO,
  FOR_YEAR      TYPE PABRJ,
  PAY_DATE      TYPE BEGDA,
  WAGE_TYPE     TYPE LGART,
  WAGE_TYPE_TXT TYPE LGTXT,
  AMOUNT        TYPE PAD_AMT7S,
  NUMBER        TYPE ANZHL,
  UNIT_DESC     TYPE EINHTXT,
  UNIT          TYPE SHTXT,
  HIRE_DATE     TYPE DATUM,
  WORK_MONTHS   TYPE I,
  END OF ST.

DATA: MONTHS TYPE N .

TYPES:BEGIN OF ST_ERROR,
 PERNR TYPE  PERSNO,
 MSG   TYPE STRING,
 END OF ST_ERROR.

DATA: IT_ERROR TYPE TABLE OF ST_ERROR,
      WA_ERROR TYPE ST_ERROR.

TYPES:BEGIN OF STRUCT,
  PERNR         TYPE PERSNO,
  WAGE_TYPE     TYPE LGART,
  PAY_DATE      TYPE BEGDA,
  AMOUNT        TYPE PAD_AMT7S,
  NUMBER        TYPE ANZHL,
  UNIT_DESC     TYPE EINHTXT,
  END OF STRUCT.

TYPES:BEGIN OF ST_MSG,
  MSG_TYPE  TYPE C,
  MSG_TEXT  TYPE CHAR50,
  PERNR     TYPE PERSNO,
  END OF ST_MSG.

DATA : IT_MESSAGES TYPE TABLE OF ST_MSG ,
       WA_MESSAGES TYPE ST_MSG.


DATA : IT_FCAT   TYPE SLIS_T_FIELDCAT_ALV ,
       WA_FCAT   TYPE SLIS_FIELDCAT_ALV,
       WA_LAYOUT TYPE SLIS_LAYOUT_ALV.

DATA: w_eve          TYPE slis_alv_event,
      i_eve          TYPE slis_t_event,
      i_grid_event   TYPE slis_t_event,
      w_grid_event   TYPE slis_alv_event,
      i_icons        TYPE slis_t_extab.

  DATA : ITAB         TYPE TABLE OF ST,
         IT_FINAL     TYPE TABLE OF ST,
         IT_TYPE      TYPE TRUXS_T_TEXT_DATA,
         IT_HIRE_DATE TYPE TABLE OF PA0041,
         IT_SALARY    TYPE TABLE OF PA0008,
         IT_WAGE_DESC TYPE TABLE OF T512T,
         IT_PA0267    TYPE TABLE OF  P0267,"PA0267,
         IT_T538A     TYPE TABLE OF T538A,
         IT_T538T      TYPE TABLE OF T538T,
         RETURN       TYPE BAPIRETURN1,
         WA_PA0267    LIKE LINE OF IT_PA0267.

  FIELD-SYMBOLS: <FS_TAB>    TYPE ST,
                 <FS_HIRE>   LIKE LINE OF IT_HIRE_DATE,
                 <FS_SAL>    LIKE LINE OF IT_SALARY,
                 <FS_WAGE>   LIKE LINE OF IT_WAGE_DESC,
                 <FS_PA0267> LIKE LINE OF IT_PA0267,
*                 <FS_PA_TEMP>   LIKE <FS_PA0267>,
                 <FS_T538A>  LIKE LINE OF IT_T538A,
                 <FS_T538T>  LIKE LINE OF IT_T538T.

DATA: BEGDA  TYPE  BUDAT,
      ENDDA  TYPE BUDAT,
      MODE   TYPE ACTIO."C  LENGTH 4  .




PARAMETERS: P_FILE TYPE RLGRAP-FILENAME.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.

  CALL FUNCTION 'F4_FILENAME'
  EXPORTING
*   PROGRAM_NAME  = SYST-CPROG
*   DYNPRO_NUMBER = SYST-DYNNR
    FIELD_NAME    = 'P_FILE'
  IMPORTING
    FILE_NAME     = P_FILE.

START-OF-SELECTION.

*IF SY-UNAME = 'A.ISMAIL'.
*  BREAK-POINT.
*ENDIF.

   CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
  EXPORTING
*   I_FIELD_SEPERATOR =
   I_LINE_HEADER  = 'X'
    I_TAB_RAW_DATA = IT_TYPE
    I_FILENAME     = P_FILE
  TABLES
    I_TAB_CONVERTED_DATA = ITAB[]
  EXCEPTIONS
    CONVERSION_FAILED = 1
    OTHERS            = 2.



IF SY-UNAME = 'A.ISMAIL'.
BREAK-POINT.
ENDIF.

LOOP AT ITAB ASSIGNING <FS_TAB>.

CLEAR MONTHS.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
  EXPORTING
    INPUT         = <FS_TAB>-PERNR
 IMPORTING
   OUTPUT        = <FS_TAB>-PERNR
          .

TRANSLATE <FS_TAB>-UNIT_DESC(1) TO UPPER CASE .
TRANSLATE <FS_TAB>-UNIT_DESC+1  TO LOWER CASE.

ENDLOOP.

UNASSIGN <FS_TAB>.

IF ITAB IS NOT INITIAL.
SELECT * FROM PA0041
  INTO CORRESPONDING FIELDS OF TABLE IT_HIRE_DATE
  FOR ALL ENTRIES IN ITAB
  WHERE PERNR = ITAB-PERNR.

  SELECT * FROM PA0008
    INTO CORRESPONDING FIELDS OF TABLE IT_SALARY
    FOR ALL ENTRIES IN ITAB
    WHERE PERNR = ITAB-PERNR AND ENDDA = '99991231' AND LGA01 = 'M020'.

SELECT * FROM T512T
  INTO CORRESPONDING FIELDS OF TABLE IT_WAGE_DESC
  FOR ALL ENTRIES IN ITAB
  WHERE LGART = ITAB-WAGE_TYPE AND SPRSL = 'A' AND MOLGA = 'EG'.

SELECT * FROM T538T
  INTO CORRESPONDING FIELDS OF TABLE IT_T538T
  FOR ALL ENTRIES IN ITAB
  WHERE ETEXT = ITAB-UNIT_DESC.

ENDIF.


IF IT_T538T IS NOT INITIAL .
SELECT * FROM T538A
  INTO CORRESPONDING FIELDS OF TABLE IT_T538A
  FOR ALL ENTRIES IN IT_T538T
  WHERE ZEINH = IT_T538T-ZEINH.
ENDIF.



LOOP AT ITAB ASSIGNING <FS_TAB>.

READ TABLE IT_HIRE_DATE ASSIGNING <FS_HIRE> WITH KEY PERNR = <FS_TAB>-PERNR.
IF SY-SUBRC = 0.
<FS_TAB>-HIRE_DATE = <FS_HIRE>-DAT01.
ELSE.
  WA_ERROR-PERNR = <FS_TAB>-PERNR.
  WA_ERROR-MSG  =  'Employee does''nt have hiring data.'.
  APPEND WA_ERROR TO IT_ERROR.
  CLEAR WA_ERROR.
  CONTINUE.
ENDIF.



IF <FS_TAB>-HIRE_DATE(4) < <FS_TAB>-FOR_YEAR.
<FS_TAB>-WORK_MONTHS = '12'.
ELSEIF <FS_TAB>-HIRE_DATE(4) = <FS_TAB>-FOR_YEAR.

  <FS_TAB>-WORK_MONTHS = '12' - <FS_TAB>-HIRE_DATE+4(2) + '1' .
ENDIF.


READ TABLE IT_SALARY ASSIGNING <FS_SAL> WITH KEY PERNR = <FS_TAB>-PERNR.
IF SY-SUBRC = 0.
<FS_TAB>-AMOUNT = ( <FS_TAB>-WORK_MONTHS / '12' ) * <FS_TAB>-NUMBER * <FS_SAL>-BET01.
ELSE.
  WA_ERROR-PERNR = <FS_TAB>-PERNR.
  WA_ERROR-MSG  =  'Employee does''nt have basic salary.'.
  APPEND WA_ERROR TO IT_ERROR.
  CLEAR  WA_ERROR.
  CONTINUE.
ENDIF.


READ TABLE IT_WAGE_DESC ASSIGNING <FS_WAGE> WITH KEY LGART = <FS_TAB>-WAGE_TYPE.
IF SY-SUBRC = 0.
<FS_TAB>-WAGE_TYPE_TXT = <FS_WAGE>-LGTXT.
ENDIF.


READ TABLE IT_T538T ASSIGNING <FS_T538T> WITH KEY ETEXT = <FS_TAB>-UNIT_DESC.
IF SY-SUBRC = 0.
READ TABLE IT_T538A ASSIGNING <FS_T538A> WITH KEY ZEINH = <FS_T538T>-ZEINH.
IF SY-SUBRC = 0.
<FS_TAB>-UNIT = <FS_T538A>-MSEHI.
ENDIF.

ENDIF.

APPEND <FS_TAB> TO IT_FINAL.

ENDLOOP.

UNASSIGN <FS_TAB>.

PERFORM BUILD_CATALOG.
PERFORM DISPLAY_ALV.



   FORM BUILD_CATALOG.

  WA_FCAT-FIELDNAME = 'PERNR'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'PERSONNEL NUMBER'.
  WA_FCAT-OUTPUTLEN = '15'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME = 'FOR_YEAR'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'FOR THE YEAR'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME = 'PAY_DATE'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'PAYMENT DATE'.
  WA_FCAT-OUTPUTLEN = '12'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME = 'WAGE_TYPE'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'WAGE TYPE'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'WAGE_TYPE_TXT'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'WAGE TYPE TEXT'.
  WA_FCAT-OUTPUTLEN = '35'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'AMOUNT'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'AMOUNT'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'NUMBER'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'NUMBER'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'UNIT_DESC'.
  WA_FCAT-TABNAME   = 'IT_FINAL'.
  WA_FCAT-SELTEXT_L = 'UNIT'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

  WA_LAYOUT-ZEBRA = 'X'.

   ENDFORM.


   FORM CATALOG_ERROR.

  WA_FCAT-FIELDNAME = 'Pernr'.
  WA_FCAT-TABNAME   = 'IT_ERROR'.
  WA_FCAT-SELTEXT_L = 'Personal Number'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME = 'MSG'.
  WA_FCAT-TABNAME   = 'IT_ERROR'.
  WA_FCAT-SELTEXT_L = 'Message'.
  WA_FCAT-OUTPUTLEN = '60'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

WA_LAYOUT-ZEBRA = 'X'.

   ENDFORM.



FORM SET_PF_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'ZALV'.
ENDFORM.


  FORM DISPLAY_ALV.


     w_eve-name = 'TOP_OF_PAGE'.
  w_eve-form = 'TOP_OF_PAGE1'.
  APPEND w_eve TO i_eve.



    CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_INIT'
      EXPORTING
        I_CALLBACK_PROGRAM             = SY-REPID
       I_CALLBACK_PF_STATUS_SET       = 'SET_PF_STATUS'
       I_CALLBACK_USER_COMMAND        = 'USER_COMMAND'
*       IT_EXCLUDING                   =
              .

CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_APPEND'
  EXPORTING
    IS_LAYOUT                        = WA_LAYOUT
    IT_FIELDCAT                      = IT_FCAT
    I_TABNAME                        = 'IT_FINAL'
    IT_EVENTS                        = i_eve[]
*   IT_SORT                          =
*   I_TEXT                           = ' '
  TABLES
    T_OUTTAB                         = IT_FINAL[]
* EXCEPTIONS
*   PROGRAM_ERROR                    = 1
*   MAXIMUM_OF_APPENDS_REACHED       = 2
*   OTHERS                           = 3
          .
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.


REFRESH: IT_FCAT,i_eve.
  CLEAR: w_eve,WA_LAYOUT.


  CLEAR: w_eve.
  w_eve-name = 'TOP_OF_PAGE'.
  w_eve-form = 'TOP_OF_PAGE2'.
  APPEND w_eve TO i_eve.


PERFORM CATALOG_ERROR.


CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_APPEND'
  EXPORTING
    IS_LAYOUT                        = WA_LAYOUT
    IT_FIELDCAT                      = IT_FCAT
    I_TABNAME                        = 'IT_ERROR'
    IT_EVENTS                        = i_eve[]
*   IT_SORT                          =
*   I_TEXT                           = ' '
  TABLES
    T_OUTTAB                         = IT_ERROR[]
* EXCEPTIONS
*   PROGRAM_ERROR                    = 1
*   MAXIMUM_OF_APPENDS_REACHED       = 2
*   OTHERS                           = 3
          .
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.






CALL FUNCTION 'REUSE_ALV_BLOCK_LIST_DISPLAY'.










**************************
*    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*      EXPORTING
**
*        I_CALLBACK_PROGRAM                = SY-REPID
*        I_CALLBACK_PF_STATUS_SET          = 'SET_PF_STATUS'
*        I_CALLBACK_USER_COMMAND           = 'USER_COMMAND'
**        I_CALLBACK_TOP_OF_PAGE            = ' '
**
**        I_GRID_SETTINGS                   =
*        IS_LAYOUT                         = WA_LAYOUT
*        IT_FIELDCAT                       = IT_FCAT
**        IT_EXCLUDING                      =
**        IT_SPECIAL_GROUPS                 =
**        IT_SORT                           =
**        IT_FILTER                         =
**        IS_SEL_HIDE                       =
**
*       TABLES
*         T_OUTTAB                          = ITAB[]
*      EXCEPTIONS
*        PROGRAM_ERROR                     = 1
*        OTHERS                            = 2
*               .
*     IF SY-SUBRC <> 0.
** IMPLEMENT SUITABLE ERROR HANDLING HERE
*     ENDIF.

    ENDFORM.


    FORM USER_COMMAND USING R_UCOMM LIKE SY-UCOMM RS_SELFIELD TYPE SLIS_SELFIELD.

REFRESH IT_MESSAGES.

IF sy-uname = 'A.ISMAIL'.
BREAK-POINT.
ENDIF.
      CASE R_UCOMM.

        WHEN 'SAVE' .

*MOVE-CORRESPONDING ITAB[] TO IT_PA0267[].

IF IT_FINAL IS NOT INITIAL.
SELECT * FROM PA0267
  INTO CORRESPONDING FIELDS OF TABLE IT_PA0267
  FOR ALL ENTRIES IN IT_FINAL
  WHERE PERNR = IT_FINAL-PERNR.
ENDIF.

UNASSIGN <FS_TAB>.


LOOP AT IT_FINAL ASSIGNING <FS_TAB>.
CLEAR: BEGDA, ENDDA.
CLEAR WA_PA0267.
READ TABLE IT_PA0267 ASSIGNING <FS_PA0267> WITH KEY PERNR = <FS_TAB>-PERNR.
 IF SY-SUBRC = 0..
IF <FS_PA0267>-PERNR = <FS_TAB>-PERNR AND  <FS_PA0267>-BEGDA = <FS_TAB>-PAY_DATE AND <FS_PA0267>-ENDDA  = <FS_TAB>-PAY_DATE
   AND <FS_PA0267>-LGART  = <FS_TAB>-WAGE_TYPE..
  MODe = 'MOD'.
  BEGDA = <FS_PA0267>-BEGDA.
  ENDDA = <FS_PA0267>-ENDDA.
  MOVE-CORRESPONDING <FS_PA0267> TO WA_PA0267.
  WA_PA0267-BETRG  = <FS_TAB>-AMOUNT.
  WA_PA0267-INFTY    = '0267'.

  IF WA_PA0267-OCRSN IS INITIAL..
    WA_PA0267-OCRSN  = '0002'.
  ENDIF.

 ELSE.

   MODE = 'INS'.


ENDIF.

ELSE.
      MODE = 'INS'.

ENDIF.

*
*
*  BEGDA = <FS_PA0267>-BEGDA.
*  ENDDA = <FS_PA0267>-ENDDA.


IF MODE = 'INS'.
  WA_PA0267-PERNR  = <FS_TAB>-PERNR.
  WA_PA0267-BETRG  = <FS_TAB>-AMOUNT.
  WA_PA0267-BEGDA  = <FS_TAB>-PAY_DATE.
  WA_PA0267-ENDDA  = <FS_TAB>-PAY_DATE.
  WA_PA0267-LGART  = <FS_TAB>-WAGE_TYPE.
  WA_PA0267-SUBTY  = <FS_TAB>-WAGE_TYPE.
  WA_PA0267-INFTY  = '0267'.
  WA_PA0267-OCRSN  = '0002'.
ENDIF.



*  <FS_PA0267>-BETRG  = <FS_TAB>-AMOUNT.
*  <FS_PA0267>-BEGDA  = <FS_TAB>-PAY_DATE.
*  <FS_PA0267>-ENDDA  = <FS_TAB>-PAY_DATE.
*  <FS_PA0267>-LGART  = <FS_TAB>-WAGE_TYPE.
*  <FS_PA0267>-ANZHL  = <FS_TAB>-NUMBER.
*  <FS_PA0267>-ZEINH  = <FS_TAB>-UNIT.



IF WA_PA0267 IS NOT INITIAL.
      CLEAR: RETURN,WA_MESSAGES.

           CALL FUNCTION 'BAPI_EMPLOYEE_ENQUEUE'
             EXPORTING
               NUMBER        = WA_PA0267-PERNR
            IMPORTING
              RETURN        = RETURN
                     .

IF RETURN-TYPE = 'E'.
WA_MESSAGES-MSG_TYPE = RETURN-TYPE.
WA_MESSAGES-MSG_TEXT = RETURN-MESSAGE.
WA_MESSAGES-PERNR    = WA_PA0267-PERNR.
APPEND WA_MESSAGES TO IT_MESSAGES.
CLEAR WA_MESSAGES.

CONTINUE.
ENDIF.



CLEAR RETURN.

          CALL FUNCTION 'HR_INFOTYPE_OPERATION'
            EXPORTING
              INFTY                  = '0267'
              NUMBER                 = WA_PA0267-PERNR
             SUBTYPE                = WA_PA0267-SUBTY
*             OBJECTID               =
*             LOCKINDICATOR          =
             VALIDITYEND            = ENDDA
             VALIDITYBEGIN          = BEGDA
             RECORDNUMBER           = WA_PA0267-SEQNR
              RECORD                 = WA_PA0267
              OPERATION              = MODE     ""'INS' "

           IMPORTING
             RETURN                 = RETURN
*             KEY                    =
                    .


CLEAR: BEGDA,ENDDA.




IF RETURN-TYPE = 'E'.

WA_MESSAGES-MSG_TYPE = RETURN-TYPE.
WA_MESSAGES-MSG_TEXT = RETURN-MESSAGE.
WA_MESSAGES-PERNR    = WA_PA0267-PERNR.
APPEND WA_MESSAGES TO IT_MESSAGES.
CLEAR WA_MESSAGES.

ELSE .

WA_MESSAGES-MSG_TYPE = 'S'.
IF MODE = 'INS'.
WA_MESSAGES-MSG_TEXT = 'Record Inserted Successfully' .
ELSEIF MODE = 'MOD'.
 WA_MESSAGES-MSG_TEXT = 'Record Changed Successfully' .
ENDIF.
WA_MESSAGES-PERNR    = WA_PA0267-PERNR.
APPEND WA_MESSAGES TO IT_MESSAGES.
CLEAR WA_MESSAGES.

ENDIF.



 CALL FUNCTION 'BAPI_EMPLOYEE_DEQUEUE'
   EXPORTING
     NUMBER        = WA_PA0267-PERNR
  IMPORTING
    RETURN        = RETURN
           .
*ENDIF.
CLEAR WA_PA0267.
ENDIF.
ENDLOOP.


REFRESH IT_FCAT.
CLEAR WA_FCAT.



  WA_FCAT-FIELDNAME = 'MSG_TYPE'.
  WA_FCAT-TABNAME   = 'IT_MESSAGES'.
  WA_FCAT-SELTEXT_L = 'Message type'.
  WA_FCAT-OUTPUTLEN = '13'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'PERNR'.
  WA_FCAT-TABNAME   = 'IT_MESSAGES'.
  WA_FCAT-SELTEXT_L = 'PERSONNEL NUMBER'.
  WA_FCAT-OUTPUTLEN = '15'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.


  WA_FCAT-FIELDNAME = 'MSG_TEXT'.
  WA_FCAT-TABNAME   = 'IT_MESSAGES'.
  WA_FCAT-SELTEXT_L = 'Message'.
  WA_FCAT-OUTPUTLEN = '60'.
     APPEND WA_FCAT TO IT_FCAT.
     CLEAR WA_FCAT.

WA_LAYOUT-ZEBRA = 'X'.


CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
*
        I_CALLBACK_PROGRAM                = SY-REPID
        I_CALLBACK_PF_STATUS_SET          = 'SET_PF_STATUS'
*        I_CALLBACK_USER_COMMAND           = 'USER_COMMAND'
*        I_CALLBACK_TOP_OF_PAGE            = ' '
*
*        I_GRID_SETTINGS                   =
        IS_LAYOUT                         = WA_LAYOUT
        IT_FIELDCAT                       = IT_FCAT
*        IT_EXCLUDING                      =
*        IT_SPECIAL_GROUPS                 =
*        IT_SORT                           =
*        IT_FILTER                         =
*        IS_SEL_HIDE                       =
*
       TABLES
         T_OUTTAB                          = IT_MESSAGES[]
      EXCEPTIONS
        PROGRAM_ERROR                     = 1
        OTHERS                            = 2
               .
     IF SY-SUBRC <> 0.
* IMPLEMENT SUITABLE ERROR HANDLING HERE
     ENDIF.

      ENDCASE.



     ENDFORM.


 FORM top_of_page1.

  FORMAT COLOR COL_POSITIVE.
  WRITE / 'Success Report:'.
  FORMAT COLOR OFF.

ENDFORM. "top_of_page


 FORM top_of_page2.

  FORMAT COLOR COL_NEGATIVE.
  WRITE:/ 'Error Report:'.
  FORMAT COLOR OFF .

ENDFORM. "top_of_page.
